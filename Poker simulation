import itertools
from collections import namedtuple
import random
import time
start = time.time()

#random.seed(12)

def all_equal(x):
  """Check for 5 of 7 flush."""
  suit_count = {}
  suit_count["C"] = sum([1 for card in x if card == "C"])
  suit_count["D"] = sum([1 for card in x if card == "D"])
  suit_count["H"] = sum([1 for card in x if card == "H"])
  suit_count["S"] = sum([1 for card in x if card == "S"])
  if max(suit_count.values()) >= 5:
    for key in suit_count.keys():
      if suit_count[key] >= 5:
        return key 
  return False

def all_different(x):
  if len(set(x)) == len(x):
    return True
  return False

def is_consecutive(x):
  """ Check if x contains a straight.
  x is a list of integers. e.g. [1,1,2,3,7]
  """
  x = sorted(x)
  #print(len(x), x)
  for start_i in range( len(x)-4):
    for i in range(4):
      if x[i + start_i] != x[i+1 + start_i]-1:
        break
    else:
      return True
  return False


def num_matches(int_hand):
  matches = {}
  for i in int_hand:
    if i[0] not in matches.keys():
      matches[i[0]] = 1
    else:
      matches[i[0]] += 1
  return matches

def types_of_pairs(int_hand):
  matches = num_matches(int_hand)
  num_of_pairs = 0
  num_of_threes = 0
  num_of_fours = 0
  for i in matches:
    if matches[i] == 7:
      num_of_fours += 1
    if matches[i] == 6:
      num_of_fours += 1
    if matches[i] == 5:
      num_of_fours += 1
    if matches[i] == 4:
      num_of_fours += 1
    if matches[i] == 3:
      num_of_threes += 1
    if matches[i] == 2:
      num_of_pairs += 1
  if num_of_fours >= 1:
    return "FOUR OF A KIND!"
  if num_of_threes >= 1 and num_of_pairs >= 1:
    return "FULL HOUSE!"
  if num_of_threes >= 1:
    return "THREE OF A KIND!"
  if num_of_pairs >= 2:
    return "DOUBLE PAIR!"
  if num_of_pairs >= 1:
    return "PAIR"
  return "HIGH CARD"
 
suits = ["S", "H", "D", "C"]
ranks = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
cards = list(itertools.product(ranks, suits))
pocket = list(itertools.combinations(cards, 2))
community = list(itertools.combinations(cards, 5))
#seven_cards = []


a = random.choice(community)
sam_card = ["J", "C"]

def rv(card):
  rank = card[0]
  if rank == "J":
    return 11
  elif rank == "Q":
    return 12
  elif rank == "K":
    return 13
  elif rank == "A":
    return 14
  else:
    return int(rank)





#def print_card(card):
  #rank, suit = card[:2]
  #if suit == "S":
    #suit = "♤"
  #if suit == "H":
    #suit = "♡"
  #if suit == "D":
    #suit = "♢"
  #if suit == "C": 
    #suit = "♧"
  #return (rank + suit)#
  ###########################################################################


  #if all_equal(x) == True and is_consecutive(x) == True

#card1 = input("what is your first card?")
#card2 = input("What is your second card?")
#print("Your hand is {} and {} and your community is {}".format(card1, card2, a))

def straight_equal(x):
  suit_com = [card[1] for card in x]
  rank_com = [rv(card) for card in x]
  if all_equal(suit_com):
    flush_suit = all_equal(suit_com)
    return is_consecutive([rv(card) for card in x if card[1] == flush_suit])
  return False 

#print(a)
#print(straight_equal(a))


def spc_hand(hand):
  suit_com = [card[1] for card in hand]
  rank_com = [rv(card) for card in hand]
  #print(rank_com)
  #print(all_equal(suit_com), is_consecutive(rank_com), pair(rank_com))
  if straight_equal(hand) and 10 in rank_com and 11 in rank_com and 12 in rank_com and 13 in rank_com and 14 in rank_com:
    return "ROYAL FLUSH!"
  elif straight_equal(hand):
    return "straight flush"
  elif types_of_pairs(hand) == "FOUR OF A KIND!":
    return "four of a kind"
  elif types_of_pairs(hand) == "FULL HOUSE!":
    return "full house"
  elif all_equal(suit_com) :
    return "flush"
  elif is_consecutive(rank_com):
    return "straight"
  elif types_of_pairs(hand) == "THREE OF A KIND!":
    return "three of a kind"
  elif types_of_pairs(hand) == "DOUBLE PAIR!":
    return "double pair"
  elif types_of_pairs(hand) == "PAIR":
    return "pair"
  else:
    return "high card"

total_trials = 10


first_card = 1
second_card = 1
first_card_rank = 1
second_card_rank = 1
first_card_suit = 2
second_card_suit = 2

while first_card == second_card:
  first_card_rank = (input("What is your first card rank?"))
  first_card_suit = (input("What is your first card suit?"))
  second_card_rank = (input("What is your second card rank?"))
  second_card_suit = (input("What is your second card suit?"))
  print("(('"+ first_card_rank + "', '" + first_card_suit + "'),")
  first_card = (first_card_rank, first_card_suit)
  print("(('"+ second_card_rank + "', '" + second_card_suit + "'),")
  second_card = (second_card_rank, second_card_suit)

a = random.choice(community)
b = (first_card, second_card)
ab = (a+b)
print(a)
print(spc_hand(ab))
