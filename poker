import itertools
from collections import namedtuple
import random

def all_equal(x):                   
  if len(set(x)) == 1:
    return True
  return False

def all_different(x):
  if len(set(x)) == len(x):
    return True
  return False

def is_consecutive(x):
  x = sorted(x)
  for i in range(len(x)-1):
    if x[i] != x[i+1]-1:
      return False
  return True

matches = {}

def num_matches(x):
  for i in x:
    if i not in matches.keys():
      matches[i] = 1
    else:
      matches[i] = matches[i]+ 1
  return matches

def pair(x):
  num_of_pairs = 0
  num_of_threes = 0
  num_of_fours = 0
  for i in matches:
    if matches[i] == 4:
      num_of_fours += 1
    if matches[i] == 3:
      num_of_threes += 1
    if matches[i] == 2:
      num_of_pairs += 1
  if num_of_fours >= 1:
    return "FOUR OF A KIND!"
  if num_of_threes >= 1 and num_of_pairs >= 1:
    return "FULL HOUSE!"
  if num_of_threes >= 1:
    return "THREE OF A KIND!"
  if num_of_pairs >= 2:
    return "DOUBLE PAIR!"
  if num_of_pairs >= 1:
    return "PAIR"
  return "HIGH CARD"
 

suits = ["S", "H", "D", "C"]
ranks = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
cards = list(itertools.product(ranks, suits))
pocket = list(itertools.combinations(cards, 2))
community = list(itertools.combinations(cards, 5))
seven_cards = []
first_card_rank = (input("What is your first card rank?"))
first_card_suit = (input("What is your first card suit?"))
second_card_rank = (input("What is your second card rank?"))
second_card_suit = (input("What is your second card suit?"))

print("(('"+ first_card_rank + ", '" + first_card_suit + "'),")
first_card = ("(('"+ first_card_rank + ", '" + first_card_suit + "'),")
print("(('"+ second_card_rank + ", '" + second_card_suit + "'),")
second_card = ("(('"+ second_card_rank + ", '" + second_card_suit + "'),")
a = random.choice(community)
sam_card = ["J", "C"]

def rv(card):
  rank = card[0]
  if rank == "J":
    return 11
  elif rank == "Q":
    return 12
  elif rank == "K":
    return 13
  elif rank == "A":
    return 14
  else:
    return int(rank)

suit_com = []

for i in a:
  suit_com.append(rv(i))
suit_com.append((first_card_suit))
suit_com.append((second_card_suit))
print(rv(sam_card))

rank_com = []

for i in a:
  rank_com.append(rv(i))

rank_com.append(rv(first_card_rank))
rank_com.append(rv(second_card_rank))
print(a)

num_matches(rank_com)
print(pair(rank_com))


#def print_card(card):
  #rank, suit = card[:2]
  #if suit == "S":
    #suit = "♤"
  #if suit == "H":
    #suit = "♡"
  #if suit == "D":
    #suit = "♢"
  #if suit == "C": 
    #suit = "♧"
  #return (rank + suit)#
  ###########################################################################


  #if all_equal(x) == True and is_consecutive(x) == True

#card1 = input("what is your first card?")
#card2 = input("What is your second card?")
#print("Your hand is {} and {} and your community is {}".format(card1, card2, a))

def spc_hand(x):
  if all_equal(suit_com) and is_consecutive(rank_com) and max(rank_com) == 14:
    return "ROYAL FLUSH!"
  elif all_equal(suit_com) and is_consecutive(rank_com) and max(rank_com) != 14:
    return "STRAIT FLUSH"
  elif pair(rank_com) == "FOUR OF A KIND!":
    return "four of a kind"
  elif pair(rank_com) == "FULL HOUSE!":
    return "full house"
  elif all_equal(suit_com) and is_consecutive(rank_com) :
    return "FLUSH"
  elif is_consecutive(rank_com):
    return "strait"
  elif pair(rank_com) == "DOUBLE PAIR!":
    return "double pair"
  elif pair(rank_com) == "PAIR":
    return "pair"
  else:
    return "high card"
